/***********
*  Arduino Library for the 5 x 5 RGB LED "tile" made by Burgeon Group
*
* Natalie Freed, June 2013
*
* Uses Adafruit_WS2801 library from adafruit.com to interface with LED strips,
* adds wrapper functions for more easily playing with pixels,
* and some effect functions (drawing letters, twinkling effects...)
*
***********/

#include "Arduino.h"
#include "RGBTile.h"
// #include "SPI.h"

RGBTile::RGBTile()
{
  uint8_t dataPin  = 2;    // Yellow wire on Adafruit Pixels
  uint8_t clockPin = 3;    // Green wire on Adafruit Pixels

  // Set the first variable to the number of pixels in a row and
  // the second value to number of pixels in a column.
  _strip = Adafruit_WS2801((uint16_t)NUM_ROWS, (uint16_t)NUM_COLS, dataPin, clockPin);
  _strip.begin();
  
  for(int i=0;i<NUM_ROWS;i++)
  {
    for(int j=0;j<NUM_COLS;j++)
    {
      _colors[i][j] = Color(255,255,255); //default color is white
    }
  }
}

byte ALNUMS[][NUM_COLS] =
{
//space ASCII 32
{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00000000
},
//! ASCII 33
{
  B00000100,
  B00000100,
  B00000100,
  B00000000,
  B00000100
},
//" ASCII 34
{
  B00001010,
  B00001010,
  B00000000,
  B00000000,
  B00000000
},
//# ASCII 35
{
  B00001010,
  B00011011,
  B00001010,
  B00011011,
  B00001010
},
//$ ASCII 36
{
  B00001110,
  B00010100,
  B00001110,
  B00000101,
  B00001110
},
//% ASCII 37
{
  B00011001,
  B00011010,
  B00000100,
  B00001011,
  B00010011
},
//& ASCII 38
{
  B00001110,
  B00010000,
  B00001000,
  B00010100,
  B00001110
},
//' ASCII 39
{
  B00000100,
  B00000100,
  B00000000,
  B00000000,
  B00000000
},
//( ASCII 40
{
  B00000010,
  B00000100,
  B00000100,
  B00000100,
  B00000010
},
//) ASCII 41
{
  B00001000,
  B00000100,
  B00000100,
  B00000100,
  B00001000
},
//* ASCII 42
{
  B00001010,
  B00000100,
  B00011111,
  B00000100,
  B00001010
},
//+ ASCII 43
{
  B00100001,
  B00000100,
  B00010101,
  B00000100,
  B00010101
},
//, ASCII 44
{
  B00000000,
  B00000000,
  B00000000,
  B00001100,
  B00001000
},
//- ASCII 45
{
  B00000000,
  B00000000,
  B00011111,
  B00000000,
  B00000000
},
//. ASCII 46
{
  B00000000,
  B00000000,
  B00000000,
  B00001100,
  B00001100
},
// / ASCII 47
{
  B00000001,
  B00000010,
  B00000100,
  B00001000,
  B00010000
},
//0 ASCII 48
{
  B00001110,
  B00010011,
  B00010101,
  B00011001,
  B00001110
},
//1 ASCII 49
{
  B00000100,
  B00001100,
  B00000100,
  B00000100,
  B00001110
},
//2 ASCII 50
{
  B00001110,
  B00000001,
  B00000110,
  B00001000,
  B00001111
},
//3 ASCII 51
{
  B00001110,
  B00000001,
  B00000110,
  B00000001,
  B00001110
},
//4 ASCII 52
{
  B00001010,
  B00001010,
  B00001111,
  B00000010,
  B00000010
},
//5 ASCII 53
{
  B00001111,
  B00001000,
  B00001110,
  B00000001,
  B00001110
},
//6 ASCII 54
{
  B00000111,
  B00001000,
  B00001110,
  B00001001,
  B00000110
},
//7 ASCII 55
{
  B00011110,
  B00000010,
  B00000100,
  B00001000,
  B00001000
},
//8 ASCII 56
{
  B00001110,
  B00010001,
  B00001110,
  B00010001,
  B00001110
},
//9 ASCII 57
{
  B00000110,
  B00001001,
  B00000111,
  B00000001,
  B00001110
},
//: ASCII 58
{
  B00001100,
  B00001100,
  B00000000,
  B00001100,
  B00001100
},
//; ASCII 59
{
  B00001100,
  B00001100,
  B00000000,
  B00000100,
  B00001000
},
//< ASCII 60
{
  B00000010,
  B00000100,
  B00001000,
  B00000100,
  B00000010
},
//= ASCII 61
{
  B00000000,
  B00011111,
  B00000000,
  B00011111,
  B00000000
},
//> ASCII 62
{
  B00001000,
  B00000100,
  B00000010,
  B00000100,
  B00001000
},
//? ASCII 63
{
  B00001110,
  B00000001,
  B00000110,
  B00000000,
  B00000100
},
//@ ASCII 64
{
  B00001110,
  B00010101,
  B00010111,
  B00010000,
  B00001111
},
  //A
{
  B00001110,
  B00010001,
  B00011111,
  B00010001,
  B00010001
},
//B
{
  B00011110,
  B00010001,
  B00011110,
  B00010001,
  B00011110
},
//C
{
  B00001110,
  B00010001,
  B00010000,
  B00010001,
  B00001110
},

//D
{
  B00011110,
  B00010001,
  B00010001,
  B00010001,
  B00011110
},
//E
{
  B00011111,
  B00010000,
  B00011110,
  B00010000,
  B00011111
},
//F
{
  B00011111,
  B00010000,
  B00011110,
  B00010000,
  B00010000
},
//G
{
  B00001110,
  B00010000,
  B00010011,
  B00010001,
  B00001110
},
//H
{
  B00010001,
  B00010001,
  B00011111,
  B00010001,
  B00010001
},
//I
{
  B00001110,
  B00000100,
  B00000100,
  B00000100,
  B00001110
},
//J
{
  B00001110,
  B00000100,
  B00000100,
  B00010100,
  B00001100
},
//K
{
  B00010001,
  B00010010,
  B00011100,
  B00010010,
  B00010001
},
//L
{
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00011111
},
//M
{
  B00010001,
  B00011011,
  B00010101,
  B00010001,
  B00010001
},
//N
{
  B00010001,
  B00011001,
  B00010101,
  B00010011,
  B00010001
},
//O
{
  B00001110,
  B00010001,
  B00010001,
  B00010001,
  B00001110
},
//P
{
  B00011110,
  B00010001,
  B00011110,
  B00010000,
  B00010000
},
//Q
{
  B00001100,
  B00010010,
  B00010010,
  B00010010,
  B00001101
},
//R
{
  B00011110,
  B00010001,
  B00011110,
  B00010010,
  B00010001
},
//S
{
  B00001110,
  B00010000,
  B00001110,
  B00000001,
  B00001110
},
//T
{
  B00011111,
  B00000100,
  B00000100,
  B00000100,
  B00000100
},
//U
{
  B00010001,
  B00010001,
  B00010001,
  B00010001,
  B00001110
},
//V
{
  B00010001,
  B00010001,
  B00010001,
  B00001010,
  B00000100
},
//W
{
  B00010001,
  B00010001,
  B00010101,
  B00011011,
  B00010001
},
//X
{
  B00010001,
  B00001010,
  B00000100,
  B00001010,
  B00010001
},
//Y
{
  B00010001,
  B00001010,
  B00000100,
  B00000100,
  B00000100
},
//Z
{
  B00011111,
  B00000010,
  B00000100,
  B00001000,
  B00011111
},
//[ ASCII 91
{
  B00001110,
  B00001000,
  B00001000,
  B00001000,
  B00001110
},
//\ ASCII 92
{
  B00010000,
  B00001000,
  B00000100,
  B00000010,
  B00000001
},
//] ASCII 93
{
  B00001110,
  B00000010,
  B00000010,
  B00000010,
  B00001110
},
//^ ASCII 94
{
  B00000100,
  B00001010,
  B00010001,
  B00000000,
  B00000000
},
//_ ASCII 95
{
  B00000000,
  B00000000,
  B00000000,
  B00000000,
  B00011111
},
//` ASCII 96
{
  B00011111,
  B00000010,
  B00000100,
  B00001000,
  B00011111
},
  //a
{
  B00001110,
  B00010001,
  B00011111,
  B00010001,
  B00010001
},
//b
{
  B00011110,
  B00010001,
  B00011110,
  B00010001,
  B00011110
},
//c
{
  B00001110,
  B00010001,
  B00010000,
  B00010001,
  B00001110
},
//d
{
  B00011110,
  B00010001,
  B00010001,
  B00010001,
  B00011110
},
//e
{
  B00011111,
  B00010000,
  B00011110,
  B00010000,
  B00011111
},
//f
{
  B00011111,
  B00010000,
  B00011110,
  B00010000,
  B00010000
},
//g
{
  B00001110,
  B00010000,
  B00010011,
  B00010001,
  B00001110
},
//h
{
  B00010001,
  B00010001,
  B00011111,
  B00010001,
  B00010001
},
//i
{
  B00001110,
  B00000100,
  B00000100,
  B00000100,
  B00001110
},
//j
{
  B00001110,
  B00000100,
  B00000100,
  B00010100,
  B00001100
},
//k
{
  B00010001,
  B00010010,
  B00011100,
  B00010010,
  B00010001
},
//l
{
  B00010000,
  B00010000,
  B00010000,
  B00010000,
  B00011111
},
//m
{
  B00010001,
  B00011011,
  B00010101,
  B00010001,
  B00010001
},
//n
{
  B00010001,
  B00011001,
  B00010101,
  B00010011,
  B00010001
},
//o
{
  B00001110,
  B00010001,
  B00010001,
  B00010001,
  B00001110
},
//p
{
  B00011110,
  B00010001,
  B00011110,
  B00010000,
  B00010000
},
//q
{
  B00001100,
  B00010010,
  B00010010,
  B00010010,
  B00001101
},
//r
{
  B00011110,
  B00010001,
  B00011110,
  B00010010,
  B00010001
},
//s
{
  B00001110,
  B00010000,
  B00001110,
  B00000001,
  B00001110
},
//t
{
  B00011111,
  B00000100,
  B00000100,
  B00000100,
  B00000100
},
//u
{
  B00010001,
  B00010001,
  B00010001,
  B00010001,
  B00001110
},
//v
{
  B00010001,
  B00010001,
  B00010001,
  B00001010,
  B00000100
},
//w
{
  B00010001,
  B00010001,
  B00010101,
  B00011011,
  B00010001
},
//x
{
  B00010001,
  B00001010,
  B00000100,
  B00001010,
  B00010001
},
//y
{
  B00010001,
  B00001010,
  B00000100,
  B00000100,
  B00000100
},
//z
{
  B00011111,
  B00000010,
  B00000100,
  B00001000,
  B00011111
},
//empty
{
  B00011111,
  B00011111,
  B00011111,
  B00011111,
  B00011111
}


};

// Create a 24 bit color value from R,G,B
// From Adafruit_WS2801 library (examples)
uint32_t RGBTile::Color(byte r, byte g, byte b)
{
  uint32_t c;
  c = r;
  c <<= 8;
  c |= g;
  c <<= 8;
  c |= b;
  return c;
}

//Map char to its position in the array of defined letters
byte* RGBTile::getLetter(char l)
{
  if(l>31&&l<123)
  {
    return ALNUMS[l-32];
  }
  else
  {
    return ALNUMS[123-32];
  }
}


void RGBTile::drawLetter(char c)
{
//  uint32_t color;
  byte* l = getLetter(c);
  for(int i=0;i<NUM_ROWS;i++)
  {
    for(int j=0;j<NUM_COLS;j++)
    {
      int k = map(i, 0, NUM_ROWS-1, NUM_ROWS-1, 0);
      int m = map(j, 0, NUM_COLS-1, NUM_COLS-1, 0);
      _strip.setPixelColor(m, k, ((0x1 << j) & l[i])? _colors[m][k]:Color(0,0,0));
    }  
 
  }
  _strip.show();
}

void RGBTile::twinkle() {
  int n = random(0, 5);
  for(int i=0;i<_strip.numPixels();i++)
  {
    _strip.setPixelColor(i, Color(0,0,0));
  }
  for(int k=0;k<n;k++)
  {
    int r = random(0, _strip.numPixels()*2);
    for(int i=0;i<_strip.numPixels();i++)
    {
      if(i == r)
      {
        _strip.setPixelColor(i, _colors[i/NUM_COLS][i%NUM_COLS]);
  //      strip.setPixelColor(i, Color(0,0,0));
      }
    }
  }
  _strip.show();
}

void RGBTile::drawAll()
{
   for(int i=0;i<NUM_ROWS;i++)
   {
    for(int j=0;j<NUM_COLS;j++)
    {
      _strip.setPixelColor(i, j, _colors[i][j]);
    }  
  }
   _strip.show(); 
}

void RGBTile::drawPixel(int x, int y)
{
  _strip.setPixelColor(x, y, _colors[x][y]); 
  _strip.show();
}

void RGBTile::colorPixel(int x, int y, byte r, byte g, byte b)
{
  _colors[x][y] = Color(r, g, b); 
}